<?php
namespace Ecl\Auth;

use Cake\Auth\AbstractPasswordHasher;

class StrongPasswordHasher extends AbstractPasswordHasher
{
    /**
     * Default config for this object.
     *
     * ### Options
     *
     * - `hashType` - Hashing algo to use. Valid values are those supported by `$algo`
     *   argument of `password_hash()`. Defaults to `PASSWORD_DEFAULT`
     * - `hashOptions` - Associative array of options. Check the PHP manual for
     *   supported options for each hash type. Defaults to empty array.
     *
     * @var array
     */
    protected $_defaultConfig = [
        'hashType' => CRYPT_SHA512,
        'hashOptions' => []
    ];

    /**
     * Generates password hash.
     *
     * @param string $password Plain text password to hash.
     * @return bool|string Password hash or false on failure
     * @link https://book.cakephp.org/3.0/en/controllers/components/authentication.html#hashing-passwords
     */
    public function hash($password)
    {
        return Password::hash($password);
    }

    /**
     * Check hash. Generate hash for user provided password and check against existing hash.
     *
     * @param string $password Plain text password to hash.
     * @param string $hashedPassword Existing hashed password.
     * @return bool True if hashes match else false.
     */
    public function check($password, $hashedPassword)
    {
        return password_verify($password, $hashedPassword);
    }

    /**
     * Returns true if the password need to be rehashed, due to the password being
     * created with anything else than the passwords generated by this class.
     *
     * @param string $password The password to verify
     * @return bool
     */
    public function needsRehash($password)
    {
        return !(bool)preg_match('/^\$6\$[a-z0-9]+\$\w+/', $password);
    }
}
